{
  "version": 3,
  "sources": ["../src/index.ts", "../src/routes/todoRoutes.ts", "../src/middlewares/verifyJWT.ts", "../src/utils/db.server.ts", "../src/controllers/todo/addTodo.ts", "../src/controllers/todo/getTodos.ts", "../src/controllers/todo/deleteTodo.ts", "../src/controllers/todo/editTodo.ts", "../src/controllers/todo/getTodo.ts", "../src/config/corsOptions.ts", "../src/routes/authRoutes.ts", "../src/middlewares/LoginLimiter.ts", "../src/controllers/auth/signup.ts", "../src/controllers/auth/signin.ts", "../src/controllers/auth/refresh.ts", "../src/controllers/auth/logout.ts"],
  "sourcesContent": ["import { config } from 'dotenv'\r\nimport express, { Request, Response } from 'express'\r\nimport cors from 'cors'\r\nimport { todoRoute } from './routes/todoRoutes'\r\nimport { corsOptions } from './config/corsOptions'\r\nimport cookieParser from 'cookie-parser'\r\nimport { authRoute } from './routes/authRoutes'\r\n\r\nconfig()\r\n\r\nconst app = express()\r\n\r\napp.use(cors(corsOptions))\r\n\r\napp.use(cookieParser())\r\n\r\napp.use(express.json())\r\n\r\napp.use('/todo', todoRoute)\r\n\r\napp.use('/', authRoute)\r\n\r\napp.listen(process.env.PORT)\r\n", "import express from 'express'\n\nimport { verifyJWT } from '../middlewares/verifyJWT'\nimport { addTodo } from '@/controllers/todo/addTodo'\nimport { getTodos } from '@/controllers/todo/getTodos'\nimport { deleteTodo } from '@/controllers/todo/deleteTodo'\nimport { editTodo } from '@/controllers/todo/editTodo'\nimport { getTodo } from '@/controllers/todo/getTodo'\n\nconst router = express.Router()\n\nrouter.use(verifyJWT)\n\nrouter.route('/').post(addTodo).get(getTodos).delete(deleteTodo).patch(editTodo)\n\nrouter.route('/:id').get(getTodo)\n\nconst todoRoute = router\n\nexport { todoRoute }\n", "import { NextFunction, Request, Response } from 'express'\r\nimport jwt from 'jsonwebtoken'\r\nimport { CustomResponse } from '@/types/customResponse'\r\n\r\nconst verifyJWT = (req: Request, res: CustomResponse, next: NextFunction) => {\r\n  const token = req.headers.authorization\r\n\r\n  if (!token) return res.sendStatus(403)\r\n\r\n  jwt.verify(token, process.env.ACCESS_TOKEN_SECRET as string, (error: any) => {\r\n    console.log(error)\r\n    if (error) return res.sendStatus(403)\r\n\r\n    next()\r\n  })\r\n}\r\n\r\nexport { verifyJWT }\r\n", "import { PrismaClient } from '@prisma/client'\r\n\r\nlet db: PrismaClient\r\n\r\ndeclare global {\r\n    // eslint-disable-next-line no-var\r\n    var __db: PrismaClient | undefined\r\n}\r\n\r\nif (!global.__db) {\r\n  global.__db = new PrismaClient()\r\n}\r\n\r\n// eslint-disable-next-line prefer-const\r\ndb = global.__db\r\n\r\nexport { db }", "import { db } from '@/db'\r\nimport { CustomRequest } from '@/types/customRequest'\r\nimport { Response } from 'express'\r\nimport { INewTodo } from './todo.type'\r\n\r\nconst addTodo = async (req: CustomRequest<INewTodo>, res: Response) => {\r\n  const { completed, title = '' } = req.body\r\n\r\n  if (!title.trim()) return res.status(400).json({ message: 'Title is required!' })\r\n\r\n  try {\r\n    await db.todo.create({\r\n      data: {\r\n        title,\r\n        completed\r\n      }\r\n    })\r\n\r\n    return res.status(200).json({ message: 'Todo added successfully!' })\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      return res.status(400).json({ message: 'Error!', description: 'Something went wrong while adding todo.' })\r\n    }\r\n  }\r\n}\r\n\r\nexport { addTodo }\r\n", "import { db } from '@/db'\r\nimport { Response, Request } from 'express'\r\n\r\nconst getTodos = async (req: Request, res: Response) => {\r\n  const todos = await db.todo.findMany({\r\n    orderBy: {\r\n      createdAt: 'desc'\r\n    }\r\n  })\r\n\r\n  res.status(200).json(todos)\r\n}\r\n\r\nexport { getTodos }", "import { db } from '@/db'\r\nimport { CustomRequest } from '@/types/customRequest'\r\nimport { Response } from 'express'\r\nimport { ITodo } from './todo.type'\r\n\r\nconst deleteTodo = async (req: CustomRequest<ITodo>, res: Response) => {\r\n  const { id } = req.body\r\n\r\n  if (!id) return res.status(400).json({ message: 'No id provided!' })\r\n\r\n  try {\r\n    await db.todo.delete({\r\n      where: {\r\n        id,\r\n      }\r\n    })\r\n\r\n    res.status(200).json({ message: 'Todo deleted successfully!' })\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      res.status(400).json({ message: 'Something went wrong while deleting todo!' })\r\n    }\r\n  }\r\n}\r\n\r\nexport { deleteTodo }\r\n", "import { db } from '@/db'\r\nimport { CustomRequest } from '@/types/customRequest'\r\nimport { Response } from 'express'\r\nimport { ITodo } from './todo.type'\r\n\r\nconst editTodo = async (req: CustomRequest<ITodo>, res: Response) => {\r\n  const { title, completed, id } = req.body\r\n\r\n  if (!id) return res.status(400).json({ message: 'No id provided!' })\r\n  if (!title.trim()) return res.status(400).json({ message: 'Title is required!' })\r\n\r\n  try {\r\n    await db.todo.update({\r\n      data: {\r\n        title, completed\r\n      },\r\n      where: {\r\n        id,\r\n      }\r\n    })\r\n\r\n    res.status(200).json({ message: 'Todo Edited successfully!' })\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      res.status(400).json({ message: 'Something went wrong while editing todo!' })\r\n    }\r\n  }\r\n}\r\n\r\nexport { editTodo }\r\n", "import { db } from '@/db'\r\nimport { CustomRequest } from '@/types/customRequest'\r\nimport { Response, Request } from 'express'\r\n\r\nconst getTodo = async (req: Request<{ id: number }>, res: Response) => {\r\n  const id = +req.params.id\r\n\r\n  if (!id) return res.status(400).json({ message: 'No id provided!' })\r\n\r\n  const postData = await db.todo.findUnique({\r\n    where: {\r\n      id,\r\n    }\r\n  })\r\n\r\n  res.status(200).json(postData)\r\n}\r\n\r\nexport { getTodo }\r\n", "import { allowedOrigins } from './allowedOrigins'\r\nimport cors from 'cors'\r\n\r\nconst corsOptions: cors.CorsOptions = {\r\n  // origin: (origin, callback) => {\r\n  //   console.log(origin)\r\n  //   if (!origin) return\r\n  //\r\n  //   if (allowedOrigins.indexOf(origin) !== -1 || !origin) {\r\n  //     callback(null, true)\r\n  //   } else {\r\n  //     callback(new Error('Not allowed by CORS!'))\r\n  //   }\r\n  // },\r\n  origin: 'http://localhost:3000',\r\n  credentials: true,\r\n  optionsSuccessStatus: 200,\r\n}\r\n\r\nexport { corsOptions }\r\n", "import express from 'express'\n\nimport { loginLimiter } from '../middlewares/LoginLimiter'\nimport { signup } from '@/controllers/auth/signup'\nimport { signin } from '@/controllers/auth/signin'\nimport { refreshToken } from '@/controllers/auth/refresh'\nimport { signout } from '@/controllers/auth/logout'\n\nconst router = express.Router()\n\nrouter.route('/signup').post(signup)\n\nrouter.route('/signin').post(loginLimiter, signin)\n\nrouter.route('/refresh').get(refreshToken)\n\nrouter.route('/signout').get(signout)\n\nconst authRoute = router\n\nexport { authRoute }\n", "import { rateLimit } from 'express-rate-limit'\r\n\r\nconst loginLimiter = rateLimit({\r\n  windowMs: 60 * 1000, // 1 minute\r\n  max: 5, // Limit each IP to 5 login requests per `window` per minute\r\n  message: {\r\n    message: 'Too many login attempts!',\r\n    description:\r\n      'Too many login attempts from this IP, please try again after a 30 second pause',\r\n  },\r\n  handler: (req, res, next, options) => {\r\n    res.status(options.statusCode).send(options.message)\r\n  },\r\n  standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\r\n  legacyHeaders: false, // Disable the `X-RateLimit-*` headers\r\n})\r\n\r\nexport { loginLimiter }\r\n", "import { CustomRequest } from '@/types/customRequest'\r\nimport { TSignup } from './auth.type'\r\nimport { db } from '@/db'\r\nimport { hashSync } from 'bcrypt'\r\nimport jwt from 'jsonwebtoken'\r\nimport { CustomResponse } from '@/types/customResponse'\r\n\r\n// eslint-disable-next-line\r\nconst emailRegex = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i\r\n\r\nconst signup = async (req: CustomRequest<TSignup>, res: CustomResponse) => {\r\n  const { name, email, password } = req.body\r\n\r\n  if (!name.trim())\r\n    return res.status(400).json({ message: 'Name is required!' })\r\n  if (!emailRegex.test(email))\r\n    return res.status(400).json({ message: 'Thats not an email!' })\r\n  if (!password.trim() || password.length < 8)\r\n    return res.status(400).json({\r\n      message: 'Error!',\r\n      description: 'Password should contain atleast 8 characters',\r\n    })\r\n\r\n  try {\r\n    const existingUser = await db.user.findFirst({\r\n      where: {\r\n        email,\r\n      },\r\n    })\r\n\r\n    if (existingUser)\r\n      return res.status(400).json({\r\n        message: 'Error!',\r\n        description: 'Account with this email already exists!',\r\n      })\r\n\r\n    const hashedPassword = hashSync(password, 12)\r\n\r\n    const createdUser = await db.user.create({\r\n      data: {\r\n        name,\r\n        email,\r\n        password: hashedPassword,\r\n      },\r\n    })\r\n\r\n    const { password: _, ...user } = createdUser\r\n\r\n    const accessToken = jwt.sign(\r\n      user,\r\n      process.env.ACCESS_TOKEN_SECRET as string,\r\n      {\r\n        expiresIn: '60d',\r\n      }\r\n    )\r\n\r\n    const refreshToken = jwt.sign(\r\n      user,\r\n      process.env.REFRESH_TOKEN_SECRET as string,\r\n      {\r\n        expiresIn: '90d',\r\n      }\r\n    )\r\n\r\n    res.cookie('jwt', refreshToken, {\r\n      httpOnly: true,\r\n      secure: true,\r\n      sameSite: 'none',\r\n      maxAge: 7776000,\r\n    })\r\n\r\n    res.json({\r\n      token: accessToken,\r\n      user,\r\n      message: 'Success!',\r\n      description: 'Created account successfully!',\r\n    })\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      res\r\n        .status(400)\r\n        .json({ message: 'Something went wrong. Try again later!' })\r\n    }\r\n  }\r\n}\r\n\r\nexport { signup }\r\n", "import { CustomRequest } from '@/types/customRequest'\r\nimport { TSignin } from './auth.type'\r\nimport { db } from '@/db'\r\nimport { compareSync } from 'bcrypt'\r\nimport jwt from 'jsonwebtoken'\r\nimport { CustomResponse } from '@/types/customResponse'\r\n\r\n// eslint-disable-next-line\r\nconst emailRegex = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i\r\n\r\nconst signin = async (req: CustomRequest<TSignin>, res: CustomResponse) => {\r\n  const { email, password } = req.body\r\n\r\n  if (!emailRegex.test(email))\r\n    return res.status(400).json({ message: 'Thats not an email!' })\r\n  if (!password.trim() || password.length < 8)\r\n    return res.status(400).json({\r\n      message: 'Error!',\r\n      description: 'Password should contain at least 8 characters',\r\n    })\r\n\r\n  try {\r\n    const foundUser = await db.user.findFirst({\r\n      where: {\r\n        email,\r\n      },\r\n    })\r\n\r\n    if (!foundUser)\r\n      return res.status(400).json({\r\n        message: 'Error!',\r\n        description: 'Credentials are invalid!',\r\n      })\r\n\r\n    const { password: hashedPassword, ...user } = foundUser\r\n\r\n    const isPasswordCorrect = compareSync(password, hashedPassword)\r\n\r\n    if (!isPasswordCorrect)\r\n      return res.status(400).json({\r\n        message: 'Error!',\r\n        description: 'Credentials are invalid!',\r\n      })\r\n\r\n    const accessToken = jwt.sign(\r\n      user,\r\n      process.env.ACCESS_TOKEN_SECRET as string,\r\n      {\r\n        expiresIn: '60d',\r\n      }\r\n    )\r\n\r\n    const refreshToken = jwt.sign(\r\n      user,\r\n      process.env.REFRESH_TOKEN_SECRET as string,\r\n      {\r\n        expiresIn: '90d',\r\n      }\r\n    )\r\n\r\n    res.cookie('jwt', refreshToken, {\r\n      httpOnly: true,\r\n      secure: true,\r\n      sameSite: 'none',\r\n      maxAge: 7776000,\r\n    })\r\n\r\n    res.json({\r\n      token: accessToken,\r\n      user,\r\n      message: 'Success!',\r\n      description: 'Signed in successfully!',\r\n    })\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      res\r\n        .status(400)\r\n        .json({ message: 'Something went wrong. Try again later!' })\r\n    }\r\n  }\r\n}\r\n\r\nexport { signin }\r\n", "import { Request, Response } from 'express'\r\nimport jwt, { VerifyErrors } from 'jsonwebtoken'\r\nimport { TUserData } from './auth.type'\r\nimport { db } from '@/db'\r\n\r\nconst refreshToken = async (req: Request, res: Response) => {\r\n  const refreshTokenCookie = req.cookies.jwt as string\r\n\r\n  if (!refreshTokenCookie) return res.sendStatus(401)\r\n\r\n  jwt.verify(\r\n    refreshTokenCookie,\r\n    process.env.REFRESH_TOKEN_SECRET as string,\r\n\r\n    // @ts-expect-error todo: fix ts errors\r\n    async (error: VerifyErrors | null, decoded: TUserData) => {\r\n      if (error) {\r\n        res.sendStatus(401)\r\n\r\n        return\r\n      }\r\n\r\n      const foundUser = await db.user.findFirst({\r\n        where: {\r\n          email: decoded.email,\r\n        },\r\n      })\r\n\r\n      if (!foundUser) return res.sendStatus(401)\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n      const { password: _, ...user } = foundUser\r\n\r\n      const accessToken = jwt.sign(\r\n        {\r\n          email: user.email,\r\n        },\r\n        process.env.ACCESS_TOKEN_SECRET as string,\r\n        { expiresIn: '60d' }\r\n      )\r\n      res.status(200).json({ token: accessToken, user })\r\n    }\r\n  )\r\n}\r\n\r\nexport { refreshToken }\r\n", "import { CustomResponse } from '@/types/customResponse'\r\nimport { Request } from 'express'\r\n\r\nconst signout = async (req: Request, res: CustomResponse) => {\r\n  console.log('hejcia')\r\n\r\n  res.clearCookie('jwt', {\r\n    httpOnly: true,\r\n    secure: true,\r\n    sameSite: 'none',\r\n  })\r\n\r\n  res.json({ message: 'Signed out!' })\r\n}\r\n\r\nexport { signout }\r\n"],
  "mappings": "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",
  "names": ["import_dotenv", "import_express", "import_cors", "import_express", "import_jsonwebtoken", "verifyJWT", "req", "res", "next", "token", "jwt", "error", "import_client", "db", "addTodo", "req", "res", "completed", "title", "db", "error", "getTodos", "req", "res", "todos", "db", "deleteTodo", "req", "res", "id", "db", "error", "editTodo", "req", "res", "title", "completed", "id", "db", "error", "getTodo", "req", "res", "id", "postData", "db", "router", "express", "verifyJWT", "addTodo", "getTodos", "deleteTodo", "editTodo", "getTodo", "todoRoute", "corsOptions", "import_cookie_parser", "import_express", "import_express_rate_limit", "loginLimiter", "req", "res", "next", "options", "import_bcrypt", "import_jsonwebtoken", "emailRegex", "signup", "req", "res", "name", "email", "password", "db", "hashedPassword", "createdUser", "_", "user", "accessToken", "jwt", "refreshToken", "error", "import_bcrypt", "import_jsonwebtoken", "emailRegex", "signin", "req", "res", "email", "password", "foundUser", "db", "hashedPassword", "user", "accessToken", "jwt", "refreshToken", "error", "import_jsonwebtoken", "refreshToken", "req", "res", "refreshTokenCookie", "jwt", "error", "decoded", "foundUser", "db", "_", "user", "accessToken", "signout", "req", "res", "router", "express", "signup", "loginLimiter", "signin", "refreshToken", "signout", "authRoute", "app", "express", "cors", "corsOptions", "cookieParser", "todoRoute", "authRoute"]
}
